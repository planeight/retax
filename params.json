{
  "name": "Retax",
  "tagline": "Universal React Redux Framework",
  "body": "# Retax\r\n\r\n[![Join the chat at https://gitter.im/hourliert/retax][gitter-badge]][gitter-link]\r\n[![Build Status][travis-badge]][travis-link]\r\n[![Version][version-badge]][version-link]\r\n[![codecov.io][codecov-badge]][codecov-link]\r\n\r\n\r\nRetax helps you to bootstrap your **universal react / redux** application.\r\nIt also comes with a set of **optional** opinionated helpers to structure and reduce your application code.\r\n\r\nYou could look at the [examples](https://github.com/retaxJS/retax/tree/master/examples) folder to see how to use **retax** or look at a *HUGE* app running with retax [here][seed] (work in progress).\r\n\r\n**WARNING**:\r\n* The core of retax is stable and tested. :thumbsup:\r\n* Optional modules (*ActionsCreator*, *Api* and *RetaxComponent*) are unstable and may change in a near future\r\n\r\n## Getting started\r\n\r\nInstall retax:\r\n```\r\nnpm install --save retax\r\n```\r\n\r\nAnd satisfy peer dependencies (yay, there are many...):\r\n```\r\n\"peerDependencies\": {\r\n  \"cookie-parser\": \"^1.4.1\",\r\n  \"express\": \"^4.13.4\",\r\n  \"immutable\": \"^3.8.0\",\r\n  \"react-dom\": \"^0.14.0 || ^15.0.0-0\",\r\n  \"react-helmet\": \"^3.0.1\",\r\n  \"react-redux\": \"^4.4.5\",\r\n  \"react-router-redux\": \"^4.0.2\",\r\n  \"react-router\": \"^2.2.4\",\r\n  \"react\": \"^0.14.0 || ^15.0.0-0\",\r\n  \"redux\": \"^3.4.0\",\r\n  \"reflect-metadata\": \"^0.1.3\",\r\n  \"webpack-isomorphic-tools\": \"^2.2.26\"\r\n}\r\n```\r\n\r\nRetax also uses **es6-generators**, be sure to have a polyfill for that. [babel-polyfill](https://babeljs.io/docs/usage/polyfill/) does the trick!\r\n\r\n\r\nWe want to render this simple **react/redux** app:\r\n\r\n```tsx\r\n// app.js\r\n\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Route } from 'react-router';\r\n\r\nexport function counterReducer(state: number = 0, action: any): number {\r\n  switch (action.type) {\r\n    case 'INC':\r\n      return state + 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction incrementActionCreator() {\r\n  return { type: 'INC' };\r\n}\r\n\r\nconst About = connect(\r\n  ({ counter }) => ({ counter }),\r\n  dispatch => bindActionCreators({ incrementActionCreator }, dispatch)\r\n)(\r\n  ({ counter, incrementActionCreator }) => (\r\n    <div onClick={incrementActionCreator}>\r\n      Hello About! Here is the counter value: {counter}\r\n    </div>\r\n  )\r\n);\r\n\r\nexport default (\r\n  <Route path=\"/\">\r\n    <Route path=\"about\" component={About}/>\r\n  </Route>\r\n);\r\n\r\n```\r\n\r\nLet's do that with **retax**!\r\n\r\nFirst, define a retax configuration file.\r\n\r\n```ts\r\n// retax.config.js\r\nimport rootRoute, { counterReducer } from './app';\r\n\r\n// retax configuration file support many more options, like redux-middleware, redux-store-enhancer, dynamic rootRoute evaluation, etc...\r\n// the complete doc is comming very soon\r\nexport default {\r\n  router: {\r\n    static: rootRoute,\r\n  },\r\n  store: {\r\n    reducers: {\r\n      counter: counterReducer,\r\n    },\r\n  },\r\n};\r\n\r\n```\r\n\r\nFinally, bootstrap the app.\r\n\r\n```ts\r\n// clientEntry.js\r\n\r\nimport { retax } from 'retax';\r\nimport retaxConfig from './retax.config';\r\n\r\nretax.config(retaxConfig);\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nretax.bootstrap(rootElement);\r\n\r\n```\r\n\r\nThat's all!\r\n\r\n## What retax realy does?\r\n### It centralizes all the stuff that is not needed by the developper\r\nHow many times react / redux developpers should edit the app configuration files (like `createReduxStore.js`, `clientEntry.js`, `serverRenderingMiddleware.js`, etc...)?\r\nOnly once. But in practice. this is not really like that...\r\n* If `react-router` has an new update with a change in its API, you will have to edit the `clientEntry.js`, maybe the `serverRenderingMiddleware.js`, and others...\r\n* If `redux` has a new update and expose a new function that does something more efficiently, you surely want to have this.\r\n* If `react` has a new... etc...\r\n\r\nYou got it? It could be a serious pain to update the structure of the app. (the more you have external dependencies, the harder it is!)\r\nAnd we have not talking about creating the **real** app yet...\r\n\r\n\r\nRetax helps you with this. You have just to give it a configuration file and it will take care of everything.\r\nAll its bootstrapping process is highly customizable if you need it.\r\nYou can found [here](https://github.com/retaxJS/retax-core#bootstrapping) some details about it.\r\n\r\nHere is a non exhaustive list of retax features:\r\n\r\n* Support **universal** javascript\r\n* Initialize your **redux** store\r\n  * You could provide your redux middlewares\r\n  * You also could provide your store enhancers\r\n  * And obviously, your reducers!\r\n* Initialize **react-router**\r\n  * Just give retax a root route object (JSX or plain object)\r\n* Support out-of-the-box code splitting (useful if you are using `require.ensure` into your **react-router** routes)\r\n* Initialize **react-router-redux**\r\n* Render the **react** app\r\n  * you could append JSX elements in the render loop, useful if your want to include redux `<DevTools />`\r\n* Support lifecycle hooks to customize and inject data during the bootstrapping process. For instance you could:\r\n  * Prefetch initial state before doing the route matching\r\n  * Prefetch components data once the route matching is done.\r\n\r\nAfter the bootstrapping, you could still use all modules exposed by **react**, **react-router**, **redux**, **react-router-redux**, ...\r\n(Eg. `<Link />` from **react-router**, `bindActionCreators` from **redux**)\r\n\r\n\r\n### **OPTIONAL** It helps you structure your app and reduces your boilerplate code\r\nAs explained [here](https://github.com/retaxJS/retax-core#provide-a-inversion-of-control-container-to-retax-modules), **retax** wraps your app\r\nwith a component that has access to an IoC container. This allows you to register into it services and inject them later into other components.\r\n\r\nAll the following items are considered as **retax modules**.\r\n\r\n#### API Module\r\n##### Initial Problem\r\nLet's say uou want to do an ajax call to an API but you have to be authentified. Your auth token is in your `session` reducer.\r\nEach time you call your `doAjaxCall` actions creator, your have to:\r\n* read the store state\r\n* retrieve the auth token\r\n* pass it to your API Connector class\r\n\r\nSo much boilerplate code especially if you have to manage several API endpoints.\r\n\r\n##### Retax Solution\r\nRetax API module helps you create an API class (with base methods, GET, POST, DELETE, PUT (can be extended)) and will inject into it the current auth token.\r\nThis API class can later be injected into an Actions Creator.\r\n\r\n#### Actions Creator Module\r\nCreate an Actions Creator class with the possibility to inject into it other Actions Creator and APIs.\r\n\r\n#### Retax Component Module\r\nCreate a React component with the possibility to inject into it Actions Creators.\r\n\r\n\r\n## FAQ\r\n### I don't understand how this library is built\r\nCheck [builder][builder-link] and [builder-ts-library][builder-ts-library-link]\r\n\r\n\r\n## Typescript support\r\nThis project is shipped with typescript typings.\r\nIf you are using typescript@^1.6, you don't have to do anything, it will detect the definition types automatically.\r\n\r\n## **Thanks**\r\nThanks to [remojansen](https://github.com/remojansen) for the project [inversify](https://github.com/inversify/InversifyJS/).\r\nThis project is intensively used by **retax**.\r\n\r\n##License\r\nMIT License (MIT)\r\n\r\n\r\n[gitter-badge]: https://badges.gitter.im/retaxJS/retax.svg\r\n[gitter-link]: https://gitter.im/retaxJS/retax?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n[travis-badge]: https://travis-ci.org/retaxJS/retax.svg?branch=master\r\n[travis-link]: https://travis-ci.org/retaxJS/retax\r\n[version-badge]: https://badge.fury.io/js/retax.svg\r\n[version-link]: https://badge.fury.io/js/retax\r\n[codecov-badge]: https://codecov.io/github/retaxJS/retax/coverage.svg?branch=master\r\n[codecov-link]: https://codecov.io/github/retaxJS/retax?branch=master\r\n[seed]: https://github.com/hourliert/react-seed\r\n[builder-link]: http://builder.formidable.com/\r\n[builder-ts-library-link]: https://github.com/hourliert/builder-ts-library\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}